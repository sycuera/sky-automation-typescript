"use strict";

var _config = _interopRequireDefault(require("./config"));

var _SlackMessage = _interopRequireDefault(require("./SlackMessage"));

var _LoggingLevels = _interopRequireDefault(require("./const/LoggingLevels"));

var _emojis = _interopRequireDefault(require("./utils/emojis"));

var _textFormatters = require("./utils/textFormatters");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var loggingLevel = _config["default"].loggingLevel,
    testingEnvironment = _config["default"].testingEnvironment,
    alertChannelOnError = _config["default"].alertChannelOnError,
    reporterMethods = _config["default"].reporterMethods;

module.exports = function () {
  return {
    noColors: true,
    sendMessagesFromUser: function sendMessagesFromUser(userFunctionResponse) {
      var _this = this;

      var isArray = Array.isArray(userFunctionResponse);
      var isObject = userFunctionResponse instanceof Object;

      if (userFunctionResponse && (isArray || isObject)) {
        var messages = isArray ? userFunctionResponse : [userFunctionResponse];
        messages.forEach(function () {
          var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref$action = _ref.action,
              action = _ref$action === void 0 ? 'SEND' : _ref$action,
              message = _ref.message;

          if (action && message) {
            if (action.toUpperCase() === 'SEND') {
              _this.slack.sendMessage("".concat(message, "\n"));
            }

            if (action.toUpperCase() === 'ADD') {
              _this.slack.addMessage("".concat(message, "\n"));
            }
          }
        });
      }
    },
    reportTaskStart: function reportTaskStart(startTime, userAgents, testCount) {
      this.slack = new _SlackMessage["default"]();
      this.startTime = startTime;
      this.testCount = testCount;
      this.userAgents = userAgents;
      var startTimeFormatted = this.moment(this.startTime).format('M/D/YYYY h:mm:ss a');
      var startingMessage = "---- ".concat(_emojis["default"].rocket, " ", 'Starting TestCafe Test Run:', " ").concat((0, _textFormatters.bold)(startTimeFormatted), " ----\n");
      var startedMessage = "".concat(_emojis["default"].rocket, " ", 'Started TestCafe:', " ").concat((0, _textFormatters.bold)(startTimeFormatted), "\n");
      var ranMessage = "".concat(_emojis["default"].computer, " Ran ").concat((0, _textFormatters.bold)(this.testCount), " test").concat(this.testCount > 0 ? 's' : '', " in: ").concat((0, _textFormatters.bold)(this.userAgents), "\n");
      var envMessage = testingEnvironment ? "".concat(_emojis["default"].environment, " Test Environment: ").concat((0, _textFormatters.bold)(testingEnvironment), "\n") : '';
      var defaultTaskStartMessage = "---- START OF TEST RUN ----\n".concat(startedMessage).concat(ranMessage).concat(envMessage, "\n");

      if (reporterMethods && typeof reporterMethods.reportTaskStart === 'function') {
        try {
          var userMessageResponse = reporterMethods.reportTaskStart(startTime, userAgents, testCount);
          this.sendMessagesFromUser(userMessageResponse);
        } catch (error) {
          this.slack.sendMessage("".concat(startingMessage, "\n"));
          this.slack.addMessage(defaultTaskStartMessage);
        }
      } else {
        this.slack.sendMessage("".concat(startingMessage, "\n"));
        this.slack.addMessage(defaultTaskStartMessage);
      }
    },
    reportFixtureStart: function reportFixtureStart(name, filePath, meta) {
      this.currentFixtureName = name;

      if (reporterMethods && typeof reporterMethods.reportFixtureStart === 'function') {
        try {
          var userMessageResponse = reporterMethods.reportFixtureStart(name, filePath, meta);
          this.sendMessagesFromUser(userMessageResponse);
        } catch (error) {
          if (loggingLevel === _LoggingLevels["default"].DETAILED) {
            this.slack.addMessage("\n".concat((0, _textFormatters.bold)(this.currentFixtureName)));
          }
        }
      } else if (loggingLevel === _LoggingLevels["default"].DETAILED) {
        this.slack.addMessage("\n".concat((0, _textFormatters.bold)(this.currentFixtureName)));
      }
    },
    reportTestDone: function reportTestDone(name, testRunInfo, meta) {
      if (reporterMethods && typeof reporterMethods.reportTestDone === 'function') {
        try {
          var userMessageResponse = reporterMethods.reportTestDone(name, testRunInfo, meta);
          this.sendMessagesFromUser(userMessageResponse);
        } catch (error) {
          this.handleTestDone(name, testRunInfo);
        }
      } else {
        this.handleTestDone(name, testRunInfo);
      }
    },
    handleTestDone: function handleTestDone(name, testRunInfo) {
      var _this2 = this;

      var message = null;
      var hasErr = !!testRunInfo.errs.length;

      if (loggingLevel === _LoggingLevels["default"].DETAILED) {
        if (testRunInfo.skipped) {
          message = "".concat(_emojis["default"].fastForward, " ").concat((0, _textFormatters.italics)(name), " - ").concat((0, _textFormatters.bold)('skipped'));
        } else if (hasErr) {
          message = "".concat(_emojis["default"].fire, " ").concat((0, _textFormatters.italics)(name), " - ").concat((0, _textFormatters.bold)('failed'));
          var errorMsgs = [];
          testRunInfo.errs.forEach(function (error, id) {
            errorMsgs.push(_this2.formatError(error, "".concat(id + 1, " ")));
          });
          message = message + '```' + errorMsgs.join('\n\n\n') + '```';
        } else {
          message = "".concat(_emojis["default"].checkMark, " ").concat((0, _textFormatters.italics)(name));
        }

        this.slack.addMessage(message);
      } else if (loggingLevel === _LoggingLevels["default"].SUMMARY_WITH_ERRORS && hasErr) {
        this.renderErrors(name, testRunInfo.errs);
      }
    },
    renderErrors: function renderErrors(testname, errors) {
      var _this3 = this;

      var errorMessages = [];
      errors.forEach(function (error, id) {
        errorMessages.push(_this3.formatError(error, "".concat(id + 1, " ")));
      });
      this.slack.addErrorMessage("- ".concat(this.currentFixtureName, "\n-- ").concat(testname, "\n").concat(errorMessages.join('\n\n')));
    },
    reportTaskDone: function reportTaskDone(endTime, passed, warnings, result) {
      if (reporterMethods && typeof reporterMethods.reportTaskDone === 'function') {
        try {
          var userMessageResponse = reporterMethods.reportTaskDone(endTime, passed, warnings, result);
          this.sendMessagesFromUser(userMessageResponse);
        } catch (error) {
          this.handleReportDone(endTime, passed, warnings, result);
        }
      } else {
        this.handleReportDone(endTime, passed, warnings, result);
      }
    },
    handleReportDone: function handleReportDone(endTime, passed, warnings, result) {
      var summaryStr = '';
      var endTimeFormatted = this.moment(endTime).format('M/D/YYYY h:mm:ss a');
      var durationMs = endTime - this.startTime;
      var durationFormatted = this.moment.duration(durationMs).format('h[h] mm[m] ss[s]');
      var finishedStr = "".concat(_emojis["default"].finishFlag, " Testing finished at ").concat((0, _textFormatters.bold)(endTimeFormatted), "\n");
      var durationStr = "".concat(_emojis["default"].stopWatch, " Duration: ").concat((0, _textFormatters.bold)(durationFormatted), "\n");

      if (result.skippedCount) {
        summaryStr += "".concat(_emojis["default"].fastForward, " ").concat((0, _textFormatters.bold)("".concat(result.skippedCount, " skipped")), "\n");
      }

      if (result.failedCount) {
        summaryStr += "".concat(alertChannelOnError ? '@channel ' : '').concat(_emojis["default"].noEntry, " ").concat((0, _textFormatters.bold)("".concat(result.failedCount, "/").concat(this.testCount, " failed")));
      } else {
        summaryStr += "".concat(_emojis["default"].checkMark, " ").concat((0, _textFormatters.bold)("".concat(result.passedCount, "/").concat(this.testCount, " passed")));
      }

      var message = "\n\n".concat(finishedStr, " ").concat(durationStr, " ").concat(summaryStr);
      this.slack.addMessage(message);
      this.slack.sendTestReport(this.testCount - passed);
    }
  };
};