"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fileHelpers = require("./utils/fileHelpers");

var _LoggingLevels = _interopRequireDefault(require("./const/LoggingLevels"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

require('dotenv').config();

var defaultConfig = {
  webhookUrl: process.env.TESTCAFE_SLACK_WEBHOOK || 'https://hooks.slack.com/services/*****',
  loggingLevel: process.env.TESTCAFE_SLACK_LOGGING_LEVEL || _LoggingLevels["default"].DETAILED,
  quietMode: process.env.TESTCAFE_SLACK_QUIET_MODE || false,
  testingEnvironment: process.env.TESTCAFE_SLACK_TEST_ENV || null,
  alertChannelOnError: process.env.TESTCAFE_SLACK_ALERT_CHANNEL_ON_ERROR || false
};
var testCafeConfigFilePath = (0, _fileHelpers.resolvePath)('.testcaferc.json');
var scReporterConfigFilePath = (0, _fileHelpers.resolvePath)('.scReporterConfig.js');

var loadReporterConfig = function loadReporterConfig() {
  if (!(0, _fileHelpers.isFileExists)(testCafeConfigFilePath)) {
    return defaultConfig;
  }

  var configRawData = null;

  try {
    configRawData = (0, _fileHelpers.readFile)(testCafeConfigFilePath);
  } catch (err) {
    return defaultConfig;
  }

  try {
    var testCafeConfig = JSON.parse(configRawData);
    return testCafeConfig.reporter.find(function (obj) {
      return obj.name === 'slack-custom';
    });
  } catch (err) {
    return defaultConfig;
  }
};

var loadSlackCustomReporterConfig = function loadSlackCustomReporterConfig() {
  if (!(0, _fileHelpers.isFileExists)(scReporterConfigFilePath)) {
    return {};
  }

  try {
    var _scReporterConfig = require(scReporterConfigFilePath);

    if (!(_scReporterConfig instanceof Object)) {
      return {};
    }

    return _scReporterConfig;
  } catch (err) {
    return {};
  }
};

var reporterConfig = loadReporterConfig();
var scReporterConfig = loadSlackCustomReporterConfig();

var config = _objectSpread({}, defaultConfig, {}, reporterConfig.options, {}, scReporterConfig);

var _default = config;
exports["default"] = _default;